# ========================================
# AWS EKS Cluster
# Kubernetes cluster for running containerized applications
# Using official AWS EKS module
# ========================================

module "eks" {
  source  = "terraform-aws-modules/eks/aws"
  version = "~> 20.0"

  cluster_name    = "${var.project_name}-eks"
  cluster_version = "1.30"

  # Network configuration
  vpc_id                   = module.vpc.vpc_id
  subnet_ids               = module.vpc.private_subnets
  control_plane_subnet_ids = module.vpc.private_subnets

  # Cluster endpoint configuration
  cluster_endpoint_public_access  = true
  cluster_endpoint_private_access = true

  # OIDC Provider for IAM roles for service accounts
  enable_irsa = true

  # Cluster addons
  cluster_addons = {
    coredns = {
      most_recent = true
    }
    kube-proxy = {
      most_recent = true
    }
    vpc-cni = {
      most_recent = true
    }
    aws-ebs-csi-driver = {
      most_recent              = true
      service_account_role_arn = aws_iam_role.ebs_csi_driver.arn
    }
  }

  # EKS Managed Node Groups
  eks_managed_node_groups = {
    general = {
      name           = "eks-nodes"  # Shortened to avoid IAM role name length limit
      instance_types = [var.eks_node_instance_type]

      min_size     = var.eks_min_nodes
      max_size     = var.eks_max_nodes
      desired_size = var.eks_desired_nodes

      # Disk configuration
      block_device_mappings = {
        xvda = {
          device_name = "/dev/xvda"
          ebs = {
            volume_size           = 30
            volume_type           = "gp3"
            delete_on_termination = true
            encrypted             = true
          }
        }
      }

      # Launch template configuration
      update_config = {
        max_unavailable_percentage = 50
      }

      # Labels
      labels = {
        Environment = var.environment
        NodeGroup   = "general"
      }

      # Taints (if needed)
      # taints = []

      tags = {
        Name        = "${var.project_name}-eks-node"
        Environment = var.environment
      }
    }
  }

  # Cluster security group additional rules
  cluster_security_group_additional_rules = {
    # Allow Jenkins to communicate with EKS
    ingress_jenkins = {
      description              = "Allow Jenkins server to communicate with cluster"
      protocol                 = "tcp"
      from_port                = 443
      to_port                  = 443
      type                     = "ingress"
      source_security_group_id = aws_security_group.jenkins.id
    }
  }

  # Node security_group additional rules
  node_security_group_additional_rules = {
    # DocumentDB egress rule removed - DocumentDB not deployed
    
    # Allow Jenkins to communicate with nodes
    ingress_jenkins = {
      description              = "Allow Jenkins to communicate with nodes"
      protocol                 = "-1"
      from_port                = 0
      to_port                  = 0
      type                     = "ingress"
      source_security_group_id = aws_security_group.jenkins.id
    }

    # Allow node to node communication
    ingress_self_all = {
      description = "Node to node all ports/protocols"
      protocol    = "-1"
      from_port   = 0
      to_port     = 0
      type        = "ingress"
      self        = true
    }
  }

  tags = {
    Name        = "${var.project_name}-eks"
    Environment = var.environment
  }
}

# ========================================
# IAM Role for EBS CSI Driver
# Required for persistent volumes
# ========================================

resource "aws_iam_role" "ebs_csi_driver" {
  name = "${var.project_name}-ebs-csi-driver-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Federated = module.eks.oidc_provider_arn
        }
        Action = "sts:AssumeRoleWithWebIdentity"
        Condition = {
          StringEquals = {
            "${replace(module.eks.cluster_oidc_issuer_url, "https://", "")}:sub" = "system:serviceaccount:kube-system:ebs-csi-controller-sa"
            "${replace(module.eks.cluster_oidc_issuer_url, "https://", "")}:aud" = "sts.amazonaws.com"
          }
        }
      }
    ]
  })

  tags = {
    Name        = "${var.project_name}-ebs-csi-driver-role"
    Environment = var.environment
  }
}

resource "aws_iam_role_policy_attachment" "ebs_csi_driver" {
  role       = aws_iam_role.ebs_csi_driver.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy"
}

# ========================================
# IAM Role for Load Balancer Controller (Optional)
# Uncomment if you plan to use AWS Load Balancer Controller
# ========================================

# resource "aws_iam_role" "aws_load_balancer_controller" {
#   name = "${var.project_name}-aws-load-balancer-controller"
#
#   assume_role_policy = jsonencode({
#     Version = "2012-10-17"
#     Statement = [
#       {
#         Effect = "Allow"
#         Principal = {
#           Federated = module.eks.oidc_provider_arn
#         }
#         Action = "sts:AssumeRoleWithWebIdentity"
#         Condition = {
#           StringEquals = {
#             "${replace(module.eks.cluster_oidc_issuer_url, "https://", "")}:sub" = "system:serviceaccount:kube-system:aws-load-balancer-controller"
#             "${replace(module.eks.cluster_oidc_issuer_url, "https://", "")}:aud" = "sts.amazonaws.com"
#           }
#         }
#       }
#     ]
#   })
#
#   tags = {
#     Name        = "${var.project_name}-aws-load-balancer-controller"
#     Environment = var.environment
#   }
# }
