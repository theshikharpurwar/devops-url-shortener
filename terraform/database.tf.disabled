# ========================================
# AWS DocumentDB (MongoDB-compatible)
# Managed NoSQL database cluster
# ========================================

# Generate a random password for DocumentDB
resource "random_password" "docdb_password" {
  length  = 32
  special = true
  # Exclude characters that might cause issues in connection strings
  override_special = "!#$%&*()-_=+[]{}<>:?"
}

# ========================================
# AWS Secrets Manager - Store DB Password
# ========================================

resource "aws_secretsmanager_secret" "docdb_password" {
  name        = "${var.project_name}-docdb-password"
  description = "Master password for DocumentDB cluster"

  recovery_window_in_days = 7

  tags = {
    Name        = "${var.project_name}-docdb-password"
    Environment = var.environment
  }
}

resource "aws_secretsmanager_secret_version" "docdb_password" {
  secret_id = aws_secretsmanager_secret.docdb_password.id
  secret_string = jsonencode({
    username = var.docdb_master_username
    password = random_password.docdb_password.result
    engine   = "docdb"
    host     = aws_docdb_cluster.main.endpoint
    port     = 27017
  })
}

# ========================================
# Security Group for DocumentDB
# ========================================

resource "aws_security_group" "documentdb" {
  name        = "${var.project_name}-docdb-sg"
  description = "Security group for DocumentDB cluster"
  vpc_id      = module.vpc.vpc_id

  # Allow MongoDB port from EKS nodes
  ingress {
    description     = "MongoDB from EKS nodes"
    from_port       = 27017
    to_port         = 27017
    protocol        = "tcp"
    security_groups = [module.eks.node_security_group_id]
  }

  # Allow MongoDB port from private subnets (for debugging)
  ingress {
    description = "MongoDB from private subnets"
    from_port   = 27017
    to_port     = 27017
    protocol    = "tcp"
    cidr_blocks = module.vpc.private_subnets_cidr_blocks
  }

  # Allow from Jenkins for database migrations
  ingress {
    description     = "MongoDB from Jenkins"
    from_port       = 27017
    to_port         = 27017
    protocol        = "tcp"
    security_groups = [aws_security_group.jenkins.id]
  }

  egress {
    description = "All outbound traffic"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name        = "${var.project_name}-docdb-sg"
    Environment = var.environment
  }
}

# ========================================
# DocumentDB Subnet Group
# ========================================

resource "aws_docdb_subnet_group" "main" {
  name       = "${var.project_name}-docdb-subnet-group"
  subnet_ids = module.vpc.private_subnets

  tags = {
    Name        = "${var.project_name}-docdb-subnet-group"
    Environment = var.environment
  }
}

# ========================================
# DocumentDB Cluster Parameter Group
# ========================================

resource "aws_docdb_cluster_parameter_group" "main" {
  family      = "docdb5.0"
  name        = "${var.project_name}-docdb-params"
  description = "DocumentDB cluster parameter group for ${var.project_name}"

  # TLS is required by default for security
  parameter {
    name  = "tls"
    value = "enabled"
  }

  # Enable audit logs (optional, for compliance)
  # parameter {
  #   name  = "audit_logs"
  #   value = "enabled"
  # }

  tags = {
    Name        = "${var.project_name}-docdb-params"
    Environment = var.environment
  }
}

# ========================================
# DocumentDB Cluster
# ========================================

resource "aws_docdb_cluster" "main" {
  cluster_identifier              = "${var.project_name}-docdb-cluster"
  engine                          = "docdb"
  engine_version                  = "5.0.0"
  master_username                 = var.docdb_master_username
  master_password                 = random_password.docdb_password.result
  db_subnet_group_name            = aws_docdb_subnet_group.main.name
  db_cluster_parameter_group_name = aws_docdb_cluster_parameter_group.main.name
  vpc_security_group_ids          = [aws_security_group.documentdb.id]

  # Backup configuration
  backup_retention_period = 7
  preferred_backup_window = "03:00-04:00"

  # Maintenance window
  preferred_maintenance_window = "sun:04:00-sun:05:00"

  # Encryption at rest
  storage_encrypted = true

  # Skip final snapshot for dev environment
  # Set to false and provide snapshot_identifier in production
  skip_final_snapshot       = var.environment == "prod" ? false : true
  final_snapshot_identifier = var.environment == "prod" ? "${var.project_name}-docdb-final-snapshot-${formatdate("YYYY-MM-DD-hhmm", timestamp())}" : null

  # Enable CloudWatch logs export
  enabled_cloudwatch_logs_exports = ["audit", "profiler"]

  # Deletion protection (enable in production)
  deletion_protection = var.environment == "prod" ? true : false

  tags = {
    Name        = "${var.project_name}-docdb-cluster"
    Environment = var.environment
  }

  lifecycle {
    ignore_changes = [
      final_snapshot_identifier,
      master_password
    ]
  }
}

# ========================================
# DocumentDB Cluster Instances
# ========================================

resource "aws_docdb_cluster_instance" "main" {
  count              = 1 # Start with 1, scale to 3 for production
  identifier         = "${var.project_name}-docdb-instance-${count.index + 1}"
  cluster_identifier = aws_docdb_cluster.main.id
  instance_class     = var.docdb_instance_class

  # Enable auto minor version upgrades
  auto_minor_version_upgrade = true

  # Enable performance insights (optional)
  # performance_insights_enabled = true

  tags = {
    Name        = "${var.project_name}-docdb-instance-${count.index + 1}"
    Environment = var.environment
  }
}

# ========================================
# IAM Policy for Secrets Manager Access
# Allow EKS pods to read the database password
# ========================================

resource "aws_iam_policy" "docdb_secrets_access" {
  name        = "${var.project_name}-docdb-secrets-access"
  description = "Allow reading DocumentDB credentials from Secrets Manager"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "secretsmanager:GetSecretValue",
          "secretsmanager:DescribeSecret"
        ]
        Resource = aws_secretsmanager_secret.docdb_password.arn
      }
    ]
  })

  tags = {
    Name        = "${var.project_name}-docdb-secrets-access"
    Environment = var.environment
  }
}

# Attach the policy to the EKS node role
resource "aws_iam_role_policy_attachment" "eks_nodes_docdb_secrets" {
  role       = module.eks.eks_managed_node_groups["general"].iam_role_name
  policy_arn = aws_iam_policy.docdb_secrets_access.arn
}
